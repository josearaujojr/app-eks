name: CI/CD - AppPHP - EKS

on:
  push:
    branches:
      - main

# Permissões para o token do GitHub Actions para autenticação OIDC com a AWS
permissions:
  id-token: write # Necessário para autenticação OIDC
  contents: read  # Necessário para fazer o checkout do código
  pull-requests: write # Opcional: para postar comentários do plano em PRs

env:
  AWS_DEFAULT_REGION: us-east-1

#-Dsonar.qualitygate.wait=true
jobs:
  sonarqube-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=app-eks
            -Dsonar.sources=.
            -Dsonar.php.exclusions=vendor/**/*

  build:
    needs: sonarqube-scan
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-image.outputs.image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionRole
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t app-eks-app:${IMAGE_TAG} .
          docker tag app-eks-app:${IMAGE_TAG} ${ECR_REGISTRY}/app-eks-app:${IMAGE_TAG}
          docker push ${ECR_REGISTRY}/app-eks-app:${IMAGE_TAG}
          echo "image=${ECR_REGISTRY}/app-eks-app:${IMAGE_TAG}" >> $GITHUB_OUTPUT

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionRole
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Update kubeconfig for EKS cluster
        run: |
          aws eks update-kubeconfig --name app-eks-cluster --region us-east-1
      
      - name: Kubectl for EKS cluster
        run: |
          kubectl get pods -A
      
      - name: Deploy to Kubernetes
        env:
          SECRET_NAME: ${{ secrets.SECRET_NAME }}
          IMAGE: ${{ needs.build.outputs.image }}
          EFS_SERVER: ${{ secrets.EFS_SERVER }}
        run: |
          envsubst < k8s/app/1-pv.yaml | kubectl apply -f -
          envsubst < k8s/app/2-pvc.yaml | kubectl apply -f -
          envsubst < k8s/app/3-deployment.yaml | kubectl apply -f -